#!/bin/bash

# Copyright 2013-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the
# License. A copy of the License is located at
#
# http://aws.amazon.com/asl/
#
# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
# limitations under the License.

set -x

. /opt/cfncluster/cfnconfig

function error_exit () {
  script=`basename $0`
  echo "cfncluster: $script - $1"
  logger -t cfncluster "$script - $1"
  exit 1
}

if [ "x$cfn_master" == "x" ]; then
  error_exit 'No master server specified.'
  usage
fi

myhostname=$(hostname -s)
if [ $? != 0 ]; then
  error_exit 'Failed to determine short hostname.'
fi

# Determine instance type
instance_type=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/instance-type`
instance_type=$(echo $instance_type| tr '.' '_')

# Mount NFS exports
function mount_nfs () {
RC=0
echo "$cfn_master:/home /home nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
echo "$cfn_master:/shared /shared nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
echo "$cfn_master:/opt/sge /opt/sge nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
mount -v /home || RC=1
mount -v /shared || RC=1
mount -v /opt/sge || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during during NFS mounts"
fi
}

# Configure ganglia
function configure_ganglia () {
RC=0
location=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone` || RC=1
cd /etc/ganglia || RC=1
/bin/cp -f /opt/cfncluster/templates/os/gmond.conf.COMPUTE gmond.conf || RC=1
sed -i "s/<master>/$cfn_master/" gmond.conf || RC=1
sed -i "s/<location>/$location/" gmond.conf || RC=1
chkconfig gmond on || RC=1
service gmond start || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during Ganglia setup"
fi
}

# Setup sge profile
function setup_sge_profile () {
RC=0
ln -s /opt/sge/default/common/settings.sh /etc/profile.d/sge.sh || RC=1
ln -s /opt/sge/default/common/settings.csh /etc/profile.d/sge.csh || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during SGE profile setup"
fi
}

# Adding nodewatcher to crontab
function add_nodewatcher () {
RC=0
crontab -l > /tmp/root.crontab
echo "* * * * * cd /opt/cfncluster/nodewatcher && ./nodewatcher.py >> nodewatcher.log 2>&1" >> /tmp/root.crontab || RC=1
crontab /tmp/root.crontab || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to nodewatcher crontab"
fi
}

function minimal_install () {
  mount_nfs
  setup_sge_profile
  add_nodewatcher
}

function full_install () {
  mount_nfs
  configure_ganglia
  add_nodewatcher
}

## Main script
case $cfn_install_type in
  minimal)
    minimal_install
    ;;

  full)
    full_install
    ;;

  *)
    error_exit "Unkown install type: $cfn_install_type"

esac
  

script=`basename $0`
echo "cfncluster: $script - SUCCESS - Booted as cfncluster Compute connected to Master - $cfn_master"
logger -t cfncluster "$script - SUCCESS - Booted as cfncluster Compute connected to Master - $cfn_master"
