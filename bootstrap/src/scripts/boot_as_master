#!/bin/bash

# Copyright 2013-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the
# License. A copy of the License is located at
#
# http://aws.amazon.com/asl/
#
# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
# limitations under the License.

set -x

. /opt/cfncluster/cfnconfig

function error_exit () {
  script=`basename $0`
  echo "cfncluster: $script - $1"
  logger -t cfncluster "$script - $1"
  exit 1
}

# Run preinstall script if defined
RC=0
if [ "${cfn_preinstall}" != "NONE" ]; then
  tmpfile=$(mktemp)
  wget -qO- ${cfn_preinstall} > $tmpfile || RC=1
  if [ "${cfn_preinstall_args}" != "NONE" ]; then
    args=${cfn_preinstall_args}
  fi
  /bin/sh $tmpfile $args || RC=1
  /bin/rm $tmpfile
fi
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_master preinstall"
fi

## Non-scheduler specific functions
##

# Check cfn_volume is present in config
if [ "${cfn_volume}x" == "x" ]; then
  error_exit "Volume must be provided."
fi

# Check hostname resolves using DNS
myhostname=$(hostname -s)
if [ $? != 0 ]; then
  error_exit 'Failed to determine local hostname'
fi

# Enable PAT
RC=0
/opt/cfncluster/scripts/os/configure-pat.sh || RC=1
echo -e "\n# Enable PAT\n/opt/cfncluster/scripts/os/configure-pat.sh\n\n" >> /etc/rc.local || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to enable NAT(PAT)"
fi

# LVM stripe, format, mount ephemeral drives
RC=0
mkdir -p ${cfn_ephemeral_dir} || RC=1
chmod 1777 ${cfn_ephemeral_dir} || RC=1
MAPPING=$(/usr/bin/ec2-metadata -b | grep ephemeral | awk '{print $2}' | sed 's/sd/xvd/')
for m in $MAPPING; do
  stat -t /dev/${m} >/dev/null 2>&1 || RC=1
  check=$?
  if [ ${check} -eq 0 ]; then
    DEVS="${m} $DEVS"
  fi
done
NUM_DEVS=0
for d in $DEVS; do
  d=/dev/${d}
  dd if=/dev/zero of=${d} bs=32k count=1 || RC=1
  parted -s ${d} mklabel msdos || RC=1
  parted -s ${d} || RC=1
  parted -s -a optimal ${d} mkpart primary 1MB 100% || RC=1
  parted -s ${d} set 1 lvm on || RC=1
  let NUM_DEVS++
  PARTITIONS="${d}1 $PARTITIONS"
done
if [ $RC -ne 0 ]; then
  error_exit "Failed to detect and/or partition ephemeral devices."
fi

# sleep 10 seconds to let partitions settle (bug?)
sleep 10

# Setup LVM
RC=0
pvcreate $PARTITIONS || RC=1
vgcreate vg.01 $PARTITIONS || RC=1
lvcreate -i $NUM_DEVS -I 64 -l 100%FREE -n lv_ephemeral vg.01 || RC=1
if [ "$cfn_encrypted_ephemeral" == "true" ]; then
  mkfs -q /dev/ram1 1024 || RC=1
  mkdir -p /root/keystore || RC=1
  mount /dev/ram1 /root/keystore || RC=1
  dd if=/dev/urandom of=/root/keystore/keyfile bs=1024 count=4 || RC=1
  chmod 0400 /root/keystore/keyfile || RC=1
  cryptsetup -q luksFormat /dev/vg.01/lv_ephemeral /root/keystore/keyfile || RC=1
  cryptsetup -d /root/keystore/keyfile luksOpen /dev/vg.01/lv_ephemeral ephemeral_luks || RC=1
  mkfs.xfs /dev/mapper/ephemeral_luks || RC=1
  mount -v -t xfs -o noatime,nodiratime /dev/mapper/ephemeral_luks ${cfn_ephemeral_dir} || RC=1
else
  mkfs.xfs /dev/vg.01/lv_ephemeral || RC=1
  echo "/dev/vg.01/lv_ephemeral ${cfn_ephemeral_dir} xfs noatime,nodiratime 0 0" >> /etc/fstab || RC=1
  mount -v ${cfn_ephemeral_dir} || RC=1
fi
chmod 1777 ${cfn_ephemeral_dir} || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to create LVM stripe and/or format ephemeral volume."
fi

# Attach and mount /shared volume
RC=0
/usr/local/sbin/attachVolume.py ${cfn_volume} || RC=1
TRY=0
while [ $TRY -lt 3 ]; do
  sleep 10
  stat /dev/disk/by-ebs-volumeid/${cfn_volume} 2>&1 >/dev/null
  check_stat=$?
  if [ $check_stat -eq 0 ]; then
    break
  else
    TRY=$(( $TRY + 1 )) 
  fi
done
dev=$(stat /dev/disk/by-ebs-volumeid/${cfn_volume}|grep -- 'File:'|awk '{print $4}'|cut -d'/' -f3|tr -d "'")
fs_type=$(blkid -o list | grep -- "$dev" | awk '{print $2}')
if [ "${fs_type}x" == "x" ]; then
  mkfs.xfs /dev/disk/by-ebs-volumeid/${cfn_volume} || RC=1
  sleep 5
fi
fs_type=$(blkid -o list | grep -- "$dev" | awk '{print $2}')
echo "/dev/disk/by-ebs-volumeid/${cfn_volume} /shared $fs_type noatime,nodiratime 0 0" >> /etc/fstab
mount -v /shared || RC=1
chmod 1777 /shared || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to attach and mount volume"
fi

# Setup NFS as Master
# 1. Determine subnet for NFS exports
ETH0_MAC=`/sbin/ifconfig  | /bin/grep eth0 | awk '{print tolower($5)}' | grep '^[0-9a-f]\{2\}\(:[0-9a-f]\{2\}\)\{5\}$'`
VPC_CIDR_URI="http://169.254.169.254/latest/meta-data/network/interfaces/macs/${ETH0_MAC}/vpc-ipv4-cidr-block"
VPC_CIDR_RANGE=`curl --retry 3 --retry-delay 0 --silent --fail ${VPC_CIDR_URI}`
if [ $? -ne 0 ] ; then
   echo "Unable to retrive VPC CIDR range from meta-data. This either means a) non-VPC or b) an error" | logger -t "cfncluster"
   VPC_CIDR_RANGE="10.0.0.0/8"
else
   echo "Retrived the VPC CIDR range: ${VPC_CIDR_RANGE} from meta-data for NFS export." | logger -t "cfncluster"
fi
# 2. Update config
RC=0
cd /etc || RC=1
/bin/cp -f /opt/cfncluster/templates/os/exports.MASTER exports || RC=1
sed -i "s?<cidr>?$VPC_CIDR_RANGE?" exports || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to configure NFS exports"
fi
# 3. Start NFS
RC=0
chkconfig nfs on || RC=1
chkconfig rpcbind on || RC=1
chkconfig rpcidmapd on || RC=1
service rpcbind restart || RC=1
service rpcidmapd restart || RC=1
service nfs restart || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to start NFS server"
fi

# Setup Ganglia as Master
RC=0
location=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone` || RC=1
cd /etc/ganglia || RC=1
/bin/cp -f /opt/cfncluster/templates/os/gmond.conf.MASTER gmond.conf || RC=1
/bin/cp -f /opt/cfncluster/templates/os/gmetad.conf.MASTER gmetad.conf || RC=1
sed -i "s/<master>/$myhostname/" gmond.conf || RC=1
sed -i "s/<location>/$location/" gmond.conf || RC=1
sed -i "s/<stack_name>/$stack_name/" gmond.conf || RC=1
sed -i "s/<stack_name>/$stack_name/" gmetad.conf || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to configure Ganglia"
fi

# Start httpd and ganglia services
RC=0
chkconfig gmond on || RC=1
chkconfig gmetad on  || RC=1
chkconfig httpd on || RC=1
service gmond start || RC=1
service gmetad start || RC=1
service httpd start || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to start Ganglia"
fi

# Setup ec2-user SSH auth
RC=0
su - ec2-user -c "ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N ''" || RC=1
su - ec2-user -c "cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys2 && chmod 0600 ~/.ssh/authorized_keys2" || RC=1
su - ec2-user -c "ssh-keyscan ${myhostname} > ~/.ssh/known_hosts && chmod 0600 ~/.ssh/known_hosts" || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to setup ec2-user SSH auth"
fi

## Scheduler specific section
##

# Run boot as master for a specific scheduler
RC=0
/opt/cfncluster/scripts/${cfn_scheduler}/boot_as_master >/var/log/cfncluster.log 2>&1 || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_master for ${cfn_scheduler}"
fi

# Start sqswatcher
cd /opt/cfncluster/sqswatcher && ./sqswatcher.py 2>&1

# Run postinstall script if defined
RC=0
if [ "${cfn_postinstall}" != "NONE" ]; then
  tmpfile=$(mktemp)
  wget -qO- ${cfn_postinstall} > $tmpfile || RC=1
  if [ "${cfn_postinstall_args}" != "NONE" ]; then
    args=${cfn_postinstall_args}
  fi
  /bin/sh $tmpfile $args || RC=1
  /bin/rm $tmpfile
fi
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_master postinstall"
fi
