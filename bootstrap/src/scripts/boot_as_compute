#!/bin/bash

# Copyright 2013-2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License"). You may not use this file except in compliance with the
# License. A copy of the License is located at
#
# http://aws.amazon.com/asl/
#
# or in the "LICENSE.txt" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES 
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and
# limitations under the License.

set -x

. /opt/cfncluster/cfnconfig

function error_exit () {
  script=`basename $0`
  echo "cfncluster: $script - $1"
  logger -t cfncluster "$script - $1"
  exit 1
}

# Run preinstall script if defined
RC=0
if [ "${cfn_preinstall}" != "NONE" ]; then
  wget -qO- ${cfn_preinstall} | /bin/sh || RC=1
fi
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_compute preinstall"
fi

## Non-scheduler specific functions
##

# LVM, format, mount /ephemeral
RC=0
mkdir -p /scratch
chmod 1777 /scratch
DEVS=$(/usr/bin/ec2-metadata -b | grep ephemeral | awk '{print $2}')
NUM_DEVS=0
for d in $DEVS; do
  d=/dev/${d}
  dd if=/dev/zero of=${d} bs=32k count=1
  parted -s ${d} mklabel msdos
  parted -s ${d}
  parted -s -a optimal ${d} mkpart primary 1MB 100%
  parted -s ${d} set 1 lvm on
  let NUM_DEVS++
  PARTITIONS="$PARTITIONS ${d}1"
done
# sleep 10 seconds to let partitions settle (bug?)
sleep 10

# Setup LVM
pvcreate $PARTITIONS
vgcreate vg.01 $PARTITIONS
if [ "$cfn_encrypted_ephemeral" == "true" ] then
  mkfs -q /dev/ram1 1024
  mkdir -p /root/keystore
  mount /dev/ram1 /root/keystore
  dd if=/dev/urandom of=/root/keystore/keyfile bs=1024 count=4
  chmod 0400 /root/keystore/keyfile
  cryptsetup -q luksFormat /dev/vg.01/lv_ephemeral /root/keystore/keyfile
  cryptsetup -d /root/keystore/keyfile luksOpen /dev/vg.01/lv_ephemeral ephemeral_luks
  mkfs.xfs /dev/mapper/ephemeral_luks
  mount -v -t xfs -o noatime,nodiratime /dev/mapper/ephemeral_luks /scratch
else
  lvcreate -i $NUM_DEVS -I 64 -l 100%FREE -n lv_ephemeral vg.01
  mkfs.xfs /dev/vg.01/lv_ephemeral
  echo "/dev/vg.01/lv_ephemeral /scratch xfs noatime,nodiratime 0 0" >> /etc/fstab
  mount -v /scratch
fi
chmod 1777 /scratch

# Mount NFS exports
RC=0
echo "$cfn_master:/home /home nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
echo "$cfn_master:/shared /shared nfs hard,intr,noatime,vers=3,_netdev 0 0" >> /etc/fstab || RC=1
mount -v /home || RC=1
mount -v /shared || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during during NFS mounts"
fi

# Configure ganglia
RC=0
location=`curl --retry 3 --retry-delay 0 --silent --fail http://169.254.169.254/latest/meta-data/placement/availability-zone` || RC=1
cd /etc/ganglia || RC=1
/bin/cp -f /opt/cfncluster/templates/os/gmond.conf.COMPUTE gmond.conf || RC=1
sed -i "s/<master>/$cfn_master/" gmond.conf || RC=1
sed -i "s/<location>/$location/" gmond.conf || RC=1
chkconfig gmond on || RC=1
service gmond start || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed during Ganglia setup"
fi

# Adding nodewatcher to crontab
RC=0
crontab -l > /tmp/root.crontab
echo "* * * * * cd /opt/cfncluster/nodewatcher && ./nodewatcher.py >> nodewatcher.log 2>&1" >> /tmp/root.crontab || RC=1
crontab /tmp/root.crontab || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to nodewatcher crontab"
fi

##
# Run boot as compute for a specific scheduler
RC=0
/opt/cfncluster/scripts/${cfn_scheduler}/boot_as_compute >/var/log/cfncluster.log 2>&1 || RC=1
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_compute for ${cfn_scheduler}"
fi

# Run postinstall script if defined
RC=0
if [ "${cfn_postinstall}" != "NONE" ]; then
  wget -qO- ${cfn_postinstall} | /bin/sh || RC=1
fi
if [ $RC -ne 0 ]; then
  error_exit "Failed to run boot_as_compute postinstall"
fi

# Notify compute is ready
instance_id_url="http://169.254.169.254/latest/meta-data/instance-id"
instance_id=$(curl --retry 3 --retry-delay 0 --silent --fail ${instance_id_url})
aws --region ${cfn_region} sqs send-message --queue-url ${cfn_sqs_url} --message-body '{"Type" : "Notification", "Message" : "{\"StatusCode\":\"Complete\",\"Description\":\"Succesfully launched '${instance_id}'\",\"Event\":\"cfncluster:COMPUTE_READY\",\"EC2InstanceId\":\"'${instance_id}'\"}"}'
